---
alwaysApply: true
description: shadcn/ui component library usage guidelines
---

# shadcn/ui Component Library Guidelines

This project uses **ONLY shadcn/ui** for all UI elements. **ABSOLUTELY NO custom UI components should be created in this project.** shadcn/ui provides a collection of reusable components built using Radix UI and Tailwind CSS.

## CRITICAL RULES - NO EXCEPTIONS

1. **ONLY shadcn/ui components** - Never create custom UI components
2. **NO custom styling** - Use only shadcn/ui components and their variants
3. **NO custom CSS** - All styling must come from shadcn/ui and Tailwind classes
4. **Clerk authentication** - Must use shadcn/ui buttons with modals for sign in/sign up
5. **NO exceptions** - Every UI element must be a shadcn/ui component

## Setup Commands

### Initialize shadcn/ui (if not already initialized):
```bash
npx shadcn@latest init
```

### Install specific components:
```bash
npx shadcn@latest add [component-name]
```

**Examples:**
- `npx shadcn@latest add button` - Install button component
- `npx shadcn@latest add input` - Install input component  
- `npx shadcn@latest add card` - Install card component
- `npx shadcn@latest add dialog` - Install dialog component
- `npx shadcn@latest add form` - Install form component

## Usage Guidelines

1. **ONLY use shadcn/ui components** - Never create custom components
2. **Check available components** at https://ui.shadcn.com/docs/components before implementing UI
3. **Import components** from `@/components/ui/[component-name]` after installation
4. **Customize components** by modifying the component files in the `components/ui/` directory
5. **Follow shadcn/ui patterns** for styling and theming
6. **NO custom CSS files** - All styling through shadcn/ui and Tailwind

## Clerk Authentication Requirements

**MANDATORY**: All Clerk authentication must use shadcn/ui components:

### Sign In/Sign Up Buttons
```typescript
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogTrigger } from "@/components/ui/dialog";
import { SignIn, SignUp } from "@clerk/nextjs";

// ✅ CORRECT: Use shadcn/ui Button with Dialog
<Dialog>
  <DialogTrigger asChild>
    <Button variant="default">Sign In</Button>
  </DialogTrigger>
  <DialogContent>
    <SignIn />
  </DialogContent>
</Dialog>

<Dialog>
  <DialogTrigger asChild>
    <Button variant="outline">Sign Up</Button>
  </DialogTrigger>
  <DialogContent>
    <SignUp />
  </DialogContent>
</Dialog>
```

### User Button
```typescript
import { Button } from "@/components/ui/button";
import { UserButton } from "@clerk/nextjs";

// ✅ CORRECT: Use shadcn/ui Button for UserButton
<UserButton 
  appearance={{
    elements: {
      avatarBox: "w-8 h-8",
      userButtonPopoverCard: "bg-background border",
    }
  }}
/>
```

## Common Components to Consider

- **Layout**: `card`, `separator`, `container`
- **Forms**: `button`, `input`, `textarea`, `select`, `checkbox`, `radio-group`, `form`
- **Feedback**: `alert`, `toast`, `progress`, `skeleton`
- **Navigation**: `tabs`, `breadcrumb`, `pagination`
- **Overlays**: `dialog`, `sheet`, `popover`, `tooltip`, `dropdown-menu`
- **Data Display**: `table`, `badge`, `avatar`, `calendar`

## Project Structure

After initialization, shadcn/ui will create:
- `components/ui/` - Contains all installed components
- `components.json` - Configuration file
- `lib/utils.ts` - Utility functions (including `cn` for class merging)

## FORBIDDEN PRACTICES

❌ **NEVER do these:**
- Create custom UI components
- Write custom CSS for UI elements
- Use HTML elements directly without shadcn/ui wrappers
- Create custom buttons, inputs, or form elements
- Use Clerk's default styling without shadcn/ui integration
- Create custom modals, dialogs, or overlays
- Write custom styling for layout components

## Required Components for Clerk Integration

Install these shadcn/ui components for Clerk integration:
```bash
npx shadcn@latest add button
npx shadcn@latest add dialog
npx shadcn@latest add card
npx shadcn@latest add input
npx shadcn@latest add form
```

**Remember: This project uses ONLY shadcn/ui components. NO custom UI is allowed.**